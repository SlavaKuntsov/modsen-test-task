// <auto-generated />
using System;
using Events.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Events.Persistence.Migrations
{
    [DbContext(typeof(EventsDBContext))]
    [Migration("20241001154015_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Events.Persistence.Entities.AdminEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActiveAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Admin", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e66e13d-b612-49db-82ae-db701cc065b3"),
                            Email = "user@example.com",
                            IsActiveAdmin = true,
                            Password = "$2a$11$.Me4i9gTRY3TpNxxpjkrOu2KUAXh9BXqAzd6P6tRKb8PINsKetYJ.",
                            Role = 1
                        });
                });

            modelBuilder.Entity("Events.Persistence.Entities.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EventDateTime")
                        .HasColumnType("date");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("integer");

                    b.Property<int>("ParticipantsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("Events.Persistence.Entities.EventParticipantEntity", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EventRegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EventId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("EventParticipant", (string)null);
                });

            modelBuilder.Entity("Events.Persistence.Entities.ParticipantEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Participant", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8860c13b-e203-4572-b2e4-0af3223415cf"),
                            DateOfBirth = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "kuncovs19@gmail.com",
                            FirstName = "Святослав",
                            LastName = "Кунцов",
                            Password = "$2a$11$wxk3QEpVjODAHWckWsMC9uR3tG26nTFO0wFxMAEnUCrO1yGVXcXbW",
                            Role = 2
                        });
                });

            modelBuilder.Entity("Events.Persistence.Entities.RefreshTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdminId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("Events.Persistence.Entities.EventParticipantEntity", b =>
                {
                    b.HasOne("Events.Persistence.Entities.EventEntity", "Event")
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Persistence.Entities.ParticipantEntity", "Participant")
                        .WithMany("Events")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Events.Persistence.Entities.RefreshTokenEntity", b =>
                {
                    b.HasOne("Events.Persistence.Entities.AdminEntity", "Admin")
                        .WithOne("RefreshToken")
                        .HasForeignKey("Events.Persistence.Entities.RefreshTokenEntity", "AdminId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Events.Persistence.Entities.ParticipantEntity", "Participant")
                        .WithOne("RefreshToken")
                        .HasForeignKey("Events.Persistence.Entities.RefreshTokenEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Admin");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Events.Persistence.Entities.AdminEntity", b =>
                {
                    b.Navigation("RefreshToken")
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Persistence.Entities.EventEntity", b =>
                {
                    b.Navigation("EventParticipants");
                });

            modelBuilder.Entity("Events.Persistence.Entities.ParticipantEntity", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("RefreshToken")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
